事件冒泡与事件委托
事件冒泡： 事件在目标元素上，从内向外逐层传递，直到document对象
event.stopPropagation（） 终止事件冒泡

事件委托：由于事件冒泡的缘故， 将子事件绑定在父级上
特点：减少内存占用；动态添加的内部元素也能响应；不要滥用

addEventListener()方法，可以为某个事件同时绑定多个回调函数
 
请求状态码：
 200，201 请求成功
 303 重定向
 401，404 客户端请求错误
 500 服务器端错误
 
区别ajax请求与一般http请求
  ajax请求是一种特别的http请求
  
  
跨域： 
解决跨域方法： JSONP，CORS，代理服务器
同源策略：
  *同源：协议，域名，端口，三者都相同
  *ajax请求时，浏览器要求当前网页和server必须同源（安全），否则会抛出跨域的错误
  *加载image/link/script不受同源策略限制
服务器与服务器之间是没有跨域问题的  
  
 JSONP
 前台：<script src='url?callback=fn' />; 接收响应数据的函数
 后台：处理请求，产生需要返回的数据data； 读取callback请求参数得到前台处理响应数据的函数名fn； 返回执行函数fn的js代码：fn&&fn(data)
 缺点：只能处理get请求；没个请求在后台都要做处理，麻烦
 
 CORS原理 --- 通常用这种
 后台：返回允许浏览器在某个域上发送跨域请求的相关响应头
 app.use(function(req,res,next){
   // 允许跨域的地址
   res.header('Access-Control-Allow-Origin','http://localhost:5500')
   // 允许携带凭证（就是cookie）
   res.header('Access-Control-Allow-Credentials','true')
   // 允许跨域的请求头
   res.set('Access-Control-Allow-Headers','Content-Type')
   //放行
   next()
 })
 前台： 不需要做特别任何处理
 axios.defaults.withCredentials = true //允许携带cookie
 xhr.withCredentials = true 
 

代理服务器
开发环境：利用webpack-dev-server中的http-proxy-middle进行正向代理
   *vue脚手架项目
   *react脚手架项目
   *自定义webpack配置
   *直接使用http-proxy-middle配置
生产环境：利用nigix进行反向代理
（正向代理代理的是客户端；反向代理代理的是服务器端）


使用axios发送ajax请求
axios是个函数对象


restless API 与restful API
reseless API举例 ： /api/addTrademark 
restful API举例： /api/trademark/:id  


存储方式：
cookie： 
可用document.cookie读取或保存；利用cookies工具库简化编码；要http请求；
存储大小有限制；原生的操作语法不太方便操作cookie；浏览器可以设置禁用
sessionStorage:纯浏览器存储，大小不受限；只能保存文本，对象/数组要转换为json；数据保存在当前会话内存中，关闭浏览器则清除
localStorage:纯浏览器存储，大小不受限；只能保存文本，对象/数组要转换为json；保存在本地文件中，除非去删除，否则一直存在


从输入url到渲染出页面的整个过程
1. DNS解析：将域名地址解析ip地址
   *浏览器DNS缓存
   *计算机DNS缓存
   *路由器DNS缓存
   *路由器DNS缓存
   *网络运营商DNS缓存
   *递归查询
2. TCP链接：TCP三次握手 ===》 建立连接
   *客户端发送服务端： 我准备好了，请你准备一下
   *服务端发送客户端：我也准备好了，请你确认一下
   *客户端发送服务端：确认完毕
3. 发送请求： 将请求报文发送过去
4. 返回响应：将响应报文发送过来
5. 解析渲染页面
6. 断开连接：TCP四次挥手
    *客户端发送服务端：请求数据发送完毕，可以断开了
    *服务端发送客户端：请求数据接受完毕，可以断开了
    *服务端发送客户端：响应数据发送完毕，可以断开了
    *客户端发送服务端：响应数据接受完毕，可以断开了



























