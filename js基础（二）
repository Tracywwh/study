function类型

一、函数声明：
function sum(num1,num2){
  return num1 + num2
}


二、函数表达式：
var sum = function(num1, num2){
  return num1 + num2
};

函数声明和函数表达式几乎相差无几，但在解析加载时，并非相同。
解析起会率先读取函数声明，并使其在执行任何代码之前可用。
函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。

举例说明：
sayHi();
function sayHi(){ alert('hi') }   // 能执行；因为函数声明提升
var sayHi = function(){ alert('hi') }  // error，函数还不存在 


三、构造函数：
var sum1 = new sum();

函数和构造函数的区别：
function createPerson(name, age, job){
  var o = new object();
  o.name = name;
  o.age = age;
  o.job = job;
  o.sayName = function(){
    alert(this.name) 
  }
  return o;
}
调用： var person = createPerson('Tracy',18,'Engineer')

function Person(name, age, job){
  this.name = name;
  this.age = age;
  this.job = job;
  this.sayName = function(){
    alert(this.name)
  }
}
调用： var person = new Person('Tracy',18,'Engineer')

两者的区别在于：
1. 构造函数没有显示的创建对象
2. 直接将属性和方法赋予给了this对象
3. 没有return
4. 构造函数首字母大写
5. 创建实例必须要new操作符


四、箭头函数：
没有this，所以不能使用apply，bind，call
不能用过构造器，不能用new，会抛出错误
yield不能在箭头函数中使用


五、匿名函数
属于函数表达式，在运行时动态生成的函数
有如下缺点：
1. 增加了调用的困难度
2. 要调用自身时需要使用arguments.callee
3. 可读性差


六、闭包函数
能在一个函数中调用另一个函数


创建私有作用域，可以使用各自的变量，不必担心搞乱全局作用域；
减少闭包占用内存的问题，因为没有指向匿名函数的引用。
(function(){
  var now = new Date()
  if( now.getMonth() == 0 && now.getDate() == 1 ){
    alert('happy new yaer')
  }
})();


function MyObject(){
  // 私有变量
  var privateVariable = 10  
  // 私有函数
  function privateFunction(){
    return false;
  }
  // 特权方法
  this.publicMethod = function(){
    privateVariable++;
    return privateFunction();
  }
}


