let a = [1,2,3,4,5]

数组会改变原值

在第一位插入:
a.unshift(0,1) => a:[0,1,1,2,3,4,5]
a.unshift() 得到的是length

在第一位删除:
a.shift() => a:[2,3,4,5]   删除只能一个个删
a.shift() 得到的是第一个要被删除的元素

在最后一位插入:
a.push(6,7,8) => a:[1,2,3,4,5,6,7,8]
a.push() 得到的是length长度

在最后一位删除：
a.pop() => [1,2,3,4]  删除只能一个个删
a.pop() 得到的是最后一个要被删除的元素

切割不会改变原数组
切割:
a.slice(start:0, end:3(number))  => [1,2,3]  start是下标，end是保留的个数


判断数组的方式：
Array.isArray(a) => true

a instanceof Array => true

Array(3)  => [empty*3]
Array(3,4)  => [3,4]
new Array(3)   => [empty*3]
new Array(3,4)  => [3,4]
Array.of(3)     => [3]
Array.of(3,4)   => [3,4]

Array用不用new，效果都是一样的，
Array的参数是一个时，表示数组的长度，值为空。参数是多位时，表示数组的每一项
Array.of的参数是数组的每一项

生成【1-100】的数组
const arr = new Array(100).fill(0).map((i,v) => v+1)
const arr = [...Array(100).keys()]  [0~99]
const arr = Array.from(Array(100),(v,k) => k+ 1)


排序方式：
function compare(a,b){
    return a-b
}
a.sort(compare) => 正排序
a.reverse()     => 倒序



let b = '1234567'
字符串原值不会变

字符串替换
b.replace('1','11')
=> '11234567'
b.replace(/x/g,'h')  全局替换x的内容，用h替换

切割
b.substr(2,4) 下标；长度
=> '3456'

b.substring(2,4) 下标；截取到结束下标之前
=> '34'

b.slice(2,4)
=> '34'


字符串转成数组
b.split('')
=> ['1','2','3','4','5','6','7']

b.split(' ')
=> ['1234567']

let b='12&34&56'
b.split('&')
=> [12,34,56]



http://es6.ruanyifeng.com/#docs/destructuring






### 将对象拼装成字符串，保存到cookie中

let obj = { name: 'tracy', age: 19, address: 'pudong' }
function obj2str(obj){
    let a = ''
    for( let i in obj ){
      a += `&${i}=${obj[i]}`
    }
    a = a.slice(1)
    console.log(a)
}
obj2str(obj)


### 将cookie 中字符串解析成对象

let str = 'name=tracy&age=18&address=pudong'
function str2obj(str){
  let arr = str.split('&')        切割&成数组：['name=tracy','age=18','address=pudong']
  let c = {}
  for( let item of arr ){
     const [key, value] = item.split('=')     切割每项 ['name','tracy'] ['age','18'] ['address','pudong'] 数组重构
     if( value !== '' ){ 
      c[key] = value
     }
  }
  console.log(c)
}

str2obj(str)












