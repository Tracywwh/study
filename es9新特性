
1. Promise.allSettled
promise.all缺陷：all中执行的某个人和出现异常（reject），则只会进入catch回调。
Promise.all([funcA(),funcB(),funcC()]).then(res => {}).catch(err => { })

用allSettled可以解决多个任务同时执行时，无论一个任务正常或异常，都会返回对应的状态(fulfilled或rejected)与结果，
在then里面通过filter来过滤出想要的业务逻辑结果，这就能最大限度的保障业务当前状态的可访问性。
Promise.allSettled([
    Promise.reject({ code: 500, msg:'服务异常' },
    Promise.resolve({ code: 200, list: [] }),
    Promise.resolve({ code: 200, list: [] })
  ]).then(res => {
      /*
        0: { status: 'rejected', reson: {...} }
        1: { status: 'fulfilled', value: {...} }
        2: { status: 'fulfilled', value: {...} }
      */
      // 过滤掉rejected状态，尽可能多的保证页面区域数据渲染
      RenderContent(res.filter(el) => {
        return el.status !== 'rejected'
      })
  })




2. 可选链 ?链接
const name = user && user.info && user.info.getName && user.info.getName() // 很丑
const name = user?.info?.name?.() 



3. 空值合并运算符
const level = user.data.level || '暂无等级'
const level = user.level !== undefined && user.level !== null ? user.level : '暂无等级'
用空值合并运算符处理： const level = user.level ?? '暂无等级'



4. dynamic-import 
可以理解成‘按需’加载，这些按需执行逻辑资源都体现在某一个事件回调中去加载
el.onClick = () => {
  import(`/path/current-logic.js`).then(module => {
    module.doSomthing()
  }).catch(err=>{
    console.error(error)
  })
}



5. globalThis 
javascript在不同的环境获取全局对象有不同的方式，node中通过global，web中通过weindow，self等，有些通过this获取，
但this在js 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。
而globalThis目的就是提供一种标准化方式访问全局对象，有了globalThis后，可以在任意上下文，任意时刻获取到全局对象



6. BigInt 


7. String.prototype.matchAll




