页面栈 

wx.nagigateTo 打开新页面，原页面保留；会增加页面栈，直到页面栈大小为5

wx.navigateBack 返回；减少页面栈

wx.redirectTo 页面重定向，关闭原页面，不能返回；比如登录付款不需要回退出现的页面；不会增加页面栈
对于一些介绍性等不常用页面wx.redirectTo或wx.navigatrBack

reLaunch 回首页，没有返回键

switchTab 跳主导航页面


OpenId 是一个用户对于一个小程序/公众号的标识，开发者可以通过这个标识识别出用户。
UnionId 是一个用户对于同主体微信小程序/公众号/App的标识，开发者需要在微信开放平台下绑定相同账号的主体。
开发者可通过UnionId，实现多个小程序/公众号/App之间的数据互通。


wx.login(获取code) ===> wx.getUserInfo(用户授权) ===> 获取 unionid

小程序授权使用中的遇到的说明：
需要出现授权弹窗的就必须要用<button open-type='' getuserInfo=''>
手机号登录：
手机号验证获取openid： 进入页面就去获取jscode（wx.login(res=>{ res就是jscode })）
微信用户信息授权： <button open-type='' getUserInfo='xxx'>  xxx(e){ console.log(e就是授权后获取到的用户信息) }  

微信授权登录： 需要获取sessionkey，后端才能解析手机号
进入页面获取jscode（wx.login(res=>{res})），jscode传给后端去解析手机号，返回uuid
点击获取微信授权： <button open-type='getPhoneNumber' ...> getPhoneNumber(e){ e就是授权后获取到的信息：iv, encryptedData }
将获取到的uuid，iv, encryptedData 传给后端登录



小程序开发存在的一些问题：
1. 不支持css预编译器
2. 不支持es7等后续的js特性，async await等特性都无法直接使用，需要引入runtimejs解决
3. 没有eslint等代码检查工具

小程序优化：
1. 代码压缩
2. 清理无用代码和资源文件
3. 减少代码包中的图片等资源文件的大小和数量
4. 分包加载

首屏加载的体验优化建议：
1. 提前请求：异步数据请求不需要等待页面渲染完成
2. 利用缓存：利用storageAPI对异步请求数据进行缓存，二次启动时先利用缓存数据渲染页面，在进行后台更新
3. 避免白屏：现展示页面骨架页和基础内容
4. 及时反馈：及时对需要用户等待的交互操作给出反馈，避免用户以为小程序无响应

分包加载：主包 在启动时加载；分包A/分包B/分包C 按需加载


小程序遇到的现存问题：
微信小程序在2020年1月中取消了模版消息通知（formid的收集），用订阅消息来替代。
一次性订阅的推送不精准；
唤起订阅未操作，划出页面，未报错直接卡死后续流程。
小程序进入设置授权页的后续操作不需要做处理，因为无法获取到进入设置页后的状态。
小程序wx:key="{{item.key}}" => wx:key="key"列表渲染的key书写方式的变更。
小程序分享出去的页面，因为微信场景值问题，第一次打开分享出去的页面可能会跳到微信首页。


小程序使用的语法：
1. 原生语言 + vant-weapp 框架 + runtime.js解决异步
2. taro + taro-ui 

----------------------------  原生+vant-weapp+runtimejs ----------------------------
应用的生命周期：
onLaunch: 小程序初始化完成时（全局只触发一次）
onShow:   小程序开启或小程序从后台进入前台
onHide:   小程序从前台进入后台，监听小程序隐藏
onError:  监听错误
onPageNotFound: 页面不存在

前台：是指用户点击左上角关闭或者按了设备home离开微信，小程序没有直接销毁，而是进入了后台。


页面的生命周期：
Page({
  data: {}, 页面初始数据
  onLoad: function(options){}, 监听页面加载
  onReady: function(){}, 监听页面初次渲染完成
  onShow: function(){},  监听页面显示
  onHide: function(){},  监听页面隐藏
  onUnload: function(){}, 页面卸载
  onPullDownRefresh: function(){}, 监听用户下拉动作
  onReachBottom: function(){}, 上拉触底事件
  onShareAppMessage: function(){}, 点击右上角转发
  onPageScroll: function(){},  页面滚动触发事件
  onResize: function(){}, 尺寸改变时触发
  getData(){  事件函数
    this.setData({xxx}) 同步
  }
})

---------------------------- taro + taro-ui + redux + redux-thunk(异步) + less/sass  ----------------------------
taro可直接使用px，会自动编译成rpx；而原生语法需要用rpx

taro 2.0版本需要注意写法的升级：
1. class xxx taro.Component{}  export default xxx    用export const / export class 的方式，不使用module.export了
2. 异步处理： 需要安装包： https://taro-docs.jd.com/taro/docs/migrate-to-2.html taro的升级指南在此
3. 使用sass，在config中要引入，此处为坑！！！！！



页面的生命周期：
componentWillMount 对应小程序的onLoad
componentDidMount  对应小程序的onReady
componentDidShow   对应小程序的onShow
componentDidHide   对应小程序的onHide
componentDidCatchError 对应onError
componentDidNotFound   对应小程序的onPageNotFound
shouldComponentUpdate  页面是否需要更新
componentWillUpdate    页面即将更新
componentDidUpdate     页面更新完毕
componentWillUnmount   页面退出；对应小程序的onUnload

vant-weapp和taro-ui的区别：
vant-weapp需要引入处理异步的runtimejs； taro自带@tarojs/async-await
数据渲染方式不同，前者使用wx:for方式，后者使用map
数据获取，后者使用redux状态管理包

安装和创建项目均在ui框架文档中。



