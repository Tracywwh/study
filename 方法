jest 单元测试

1. 判断{[()]}是否匹配，符号是否匹配标准规则。
思路： 因为符号都是对称的，左边为：‘{[(’，后边必须是‘)]}’,就是栈的先进后出的原理。
遍历数组，判断是否包含左符号，或者右符号，判断{存在并且}存在，则为true，否则就是false。
实现： 
function isMatch(left:string, right:string):boolean{
   if( left === '{' && right === '}' ) return true
   if( left === '[' && right === ']' ) return true
   if( left === '(' && right === ')' ) return true
   return false
}
function matchBracket(str:string): boolean {
   if(str.length == 0 ) true;
   const left = '{[('
   const right = ')]}'
   const stack = []
   for( let i =0; i< arr.length ; i++ ){
        let s = str[i]
        if( left.includes(s) ){
            stack.push(s)
        }else if( right.cludes(s) ){
            // 右括号，判断栈顶（是否出栈）
            const top = stack(stack.length -1)
            if( isMatch(top,s) ){
                stack.pop()
            }else{
               return false
            }
        }
   }
   return stack.length === 0
} 

let a = {a[v}b]s)
matchBracket(a)    ==> false 



2. 用两个栈（先进后出）实现一个队列（先进先出）
API: add, delete, length
const queue = []
queue.push(100) //入栈
queue.push(200);
queue.push(300); ==> [100,200,300]
const num = queue.shift()  // 出队 =》 [200,300]


3. 单向链表
const n1 = {
   value: 100,
   next: n2
}
const n2 = {
   value: 200,
   next: n3
}
const n3 = {
   value: 300,
   next: n4,
}
const n4 = {
   value: 400,
}
这就是单向链表
n1 => { value:100, next: {value:200, next: { value: 300, next: { value: 400 }}}}


数组，是有序结构；
对象，是无序结构
eg: let obj = {}; obj['a'] = aaa, obj[1]=100, obj[2]=200     ====> Object.keys(obj)  => ['1','2','a']
Object是无序，Map是有序结构，Set是无序结构

链表 vs 数组 
都是有序结构；
链表：查询慢O(n)，新增和删除快O(1)
数组：查询快O(1)，新增和删除慢O(n)



链表 和数组，哪个实现队列更快？
用链表实现队列更快。单项链表即可实现，但要同事记录head和tail
要从tail入队，head出队，不然tail不好定位
length要单独存储，不能遍历链表来获取（否则时间复杂度太高O(n)）

链表性能比数组快多了。数组是要遍历的。

[1,3,5,6,7,9,11,...1000] 中找到是否包含100? 使用二分法，数据越大，性能越好。
思路： 
递归 - 代码逻辑更加清晰
非递归 - 性能更好
实践复杂度O(logn) - 非常快
/**二分查找(循环)**/   ------------较真起来，这两个方法，这个最快。
function binarySearch1(arr:number[], target:number):number{
    const length = arr.length
    if( length === 0 ) return -1
    let startIndex = 0 //开始位置
    let endIndex = length -1  //结束位置
    while( startIndex <= endIndex ){
        const midIndex = Math.floor((startIndex + endIndex )/ 2 )    // 获取中间值下标
        const midValue = arr[midIndex]  //中间值
        if( target < midValue){   
           // 说明目标值在中间值的左侧
           endIndex = midIndex - 1
        } else if ( target < midValue ){
          //说明目标值在中间值的右侧
          startIndex = midIndex + 1
        } else {
          //相等，返回
          return midIndex
        }
    }
    return -1
}

/**二分查找（递归方式）**/
function binarySearch2(arr,target,startIndex,endIndex){
     const length = arr.length
     if( length === 0 ) return -1
     
     // 开始和结束的范围
     if( startIndex == null ) startIndex = 0
     if( endIndex == null ) endIndex = length -1
     
     //如果start和end相遇，则结束
     if( startIndex === endIndex ) return -1
     
     //中间位置
     const midIndex = Math.floor((startIndex + endIndex) /2 )
     const midValue = arr[midIndex]
     
     if( target < midValue ){
           // 目标值较小，则继续在左侧查找
          return binarySearch2( arr, target, startIndex, midIndex -1 )
     }else if( target > midValue){
           // 目标值较大，则在右侧查找
          return binarySearch2( arr, target, midIndex +1, endIndex )
     }else{
          //相等，返回
          return midIndex
     }
}



凡有序，必二分
凡二分，时间复杂度必包含O(logn)
优化嵌套循环，可以考虑“双指针”


给一个数组，找出其中和为n的两个元素
function findTwoNumbers1( arr:num[], n:number): number[]{
     const res: number[] = []
     
     const length = arr.length
     if( length === 0 ) return res
     // O(n^2) 性能差
     for( let i = 0; i< length -1; i++ ){
        consy n1 = arr[i]
        let flag = false.  //是否得到了结果
        
        for( let j = i+1; j < length ; j++){
             const n2 = arr[j]
             
             if( n1+n2 === n ){
                 res.push(n1)
                 res.push(n2)
                 flag = true
                 break
             }
        }
        if( flag ) break
     }
     
     return res
}



双指针，时间复杂度降低到O(n).  ------ 一次循环
[1,2,3,4,5,6....c,X,Y]  数组从小到大的，两数之和为n。那就1为起点，Y为终点。  1+Y 和<n的话， 起点1向后继续查找， 2+Y，3+Y；
如果1+Y > n, 则起点不变，终点向前移，变小，1+X , 1+c  ... 
实现：
function findTwoNumbers2(arr:number[], n:number): number[]{
    const res:number[] = []
    
    const length = arr.length
    if( length === 0 ) return res
    
    let i = 0. //头
    let j = length -1    //尾
    
    while( i < j ){
         const n1 = arr[i]
         const n2 = arr[j]
         const sum = n1 + n2
         if( sum > n ){
         // sum > n, 则j要向前移动，减小
             j -- 
         } else if( sum < n ){
             i++
         } else {
             res.push(n1)
             res.push(n2)
             break
         }
    }
    
    return res
    
}













