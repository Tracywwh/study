MVC模式

Model模型层；
View 视图层；
Controller 控制层；

举例解释：当用户点击View视图的登录按钮，系统会调用controller控制层里的登录接口。一般在controller层中不会写很多具体的业务逻辑代码，
只会写一个接口方法，该方法具体的逻辑在service层进行实现，然后service层里的具体逻辑就会调用model模型，从而达到动态化的效果。


MVVM（数据双向绑定）
Model - 数据模型，简单的js对象
VM（ViewModel）- 视图模型，链接Model与View
View - 视图层，呈现给用户的dom渲染界面

VM的作用：对View中dom元素的监听和对model中的数据进行绑定，当View变化会引起modal中数据的改动，model中数据的改动会触发
view视图重新渲染，从而达到数据双向绑定的效果。


常见库实现数据双向绑定的做法：
发布订阅模式（Backbone.js）
脏值检查（Angular.js）
数据劫持（Vue.js）

vue不兼容ie8以下的浏览器

DocumentFragment - 文档碎片
documentFragment表示文档片段，他不属于dom树，但是他可以存储dom，并且可以将所存的dom加入到指定的dom中。
那为何不直接把元素加入到dom中呢？原因在于，使用它操作dom要比直接操作dom性能要高很多。

介绍以下 发布订阅模式
发布者-订阅者模式定义了一种一对多的依赖关系，即多一个对象的状态发生改变时，所有依赖于它的对象都会得到同志并自动更新，解决了主体对象与观察者之间功能的耦合。


实现自己的MVVM
1. 实现一个数据劫持 - Observer，对数据对象进行监听，能拿到最新值并通知订阅者
2. 实现一个模版编译 - Compiler，对每个元素节点的指令进行扫描和解析，根据指令模版替换数据，以及绑定相应的更新函数
3. 实现一个 - Watch，作为链接Observer和Compile的桥梁，能够订阅并收到每个属性变通的通知，执行指令绑定的相应毁掉函数，从而更新视图
4. MVVM作为入口函数，整合以上三者




参考地址：https://juejin.im/post/5e1b3144f265da3e4b5be2e3?utm_source=gold_browser_extension










