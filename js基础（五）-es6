set() 类似于数组，但他的值都是唯一的。

const s = new Set();
[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));
=> s:[2,3,5,4]

const arr = [2,1,3,23,3,2,1,4]
[...new Set(arr)] => [2,1,3,23,4]

也可以去除字符串中的重复字符
new Set('abcbbcd') => {'a','b','c','d'}
[...new Set('abcbbcd')].join('') => 'abcd'


set()实例的方法：
add(); delete() 不添加重复的值,仅限于new Set()方可使用

let num = new Set();
num.add(3).add(1).add(3) => num: {3,1}   

num.delete(3) => num: {1}
num.has(1) => true
num.has(3) => false

let set = ['red','blue','green']
let arr = [...set]
=> arr: ['red','blue','green']

去重：
let arr = [1,2,3,4,5,3,2,7,4,9]
let unique = [...new Set(arr)]  => [1,2,3,4,5,7,9]


let a = new Set([1,2,3,4]), b = new Set([3,4,5,6,7])
let c = new Set([...a,...b])  并集 
=> a: {1,2,3,4,5,6,7}
let d = new Set([...a].filter(x=>b.has(x)))  交集
=> d: {3,4}


promise()异步操作
const promise = new promise(function(resolve,reject){
  if(异步操作成功){
    resolve(value);
  }else{
    reject(error);
  }
})

promise.then(function(value){
    // success
},function(error){
    // failure
})



来源：http://es6.ruanyifeng.com/#docs/set-map
