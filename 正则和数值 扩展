正则的扩展

1. RegExp()构造函数

2. 字符串的正则方法： match(),replace(),search(),split()

3. u修饰符

4. RegExp.prototype.unicode属性

5. y修饰符

6. RegExp.prototype.sticky属性

7. RegExp.prototype.flags属性

8. s修饰符：dotAll模式

9. 后行断言

10. Unicode属性类

11. 具名组匹配

12. String.prototype.matchAll


数值的扩展

1. 二进制和八进制表示法

2. Number.isFinite() 判断数值是否为有限的; Number.isNaN() 判断是否为NaN
eg: Number.isFinite(Infinity)  => false 负数是无限的

3. Number.parseInt(); Number.parseFloat();
es5的写法：        parseInt('12.34') => 12
es6的写法： Number.parseInt('12.34') => 12

4. Number.isInteger() 判断是否为整数
  Number.isInteger(25.1)  => false
  
5. Number.EPSILON 在number对象上，新增一个极小的敞亮，表示1与大于1的最小浮点数之间的差。 
实际上是js能够表示的最小精度。

6. 安全整数和Number.isSafeInteger()

7. Math对象的扩展
   返回正数
   Math.trunc(4.1)  => 返回整数 4
   Math.trunc(true) => 1
   
   判断一个数到底是正数/负数还是零
   Math.sign(-5)    => -1   
   Math.sifn(0)     => 0
   
8. Math.cbrt()计算一个数的立方根
   Math.cbrt('8')   => 2
  
9. Math.clz32() 将参数转为32位无符号正数的形式，然后返回这个32位值里面有多少哥前导0

10. Math.imul() 两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数
    Math.imul(-1,8)   => -8
    
11. Math.fround() 返回一个数的32位单精度浮点数形式












