防抖和节流都属于性能优化。

防抖： 第一次触发，不会立即执行，而是给出一个时间值的延期（如500ms），在多次点击，会取消前一次的触发，唤起新的执行。
      效果： 也就是在短时间内多次操作，只执行最后一次。(前面的操作都被后一次的操作把定时器取消了，重新执行)
      实现原理：可借助闭包，通过计时器来执行函数。
      
      function debounce(fn){  // 传入的fn函数
          let timer = null;
          return function(){
             clearTimeout(timer)
             timer = setTimeout(()=>{
                        fn.apply(this,arguments)    
                     },500)
          }
      }
      function sayHi(){
          console.log('防抖成功')
      }
      $('#id').on('click',debounce(sayHi))
      

节流： 不管触发多少次，只要在n时间内，只执行一次。
      function throttle(){
        let canRun = true
        return function(){
           if( !canRun ) return 
           canRun = false
           setTimeout(()=>{
               fn.apply(this,arguments)
               canRun = true
           },500)
        }
      }
      function sayHello(e){
          console.log(e.target.innerWidth)
      }
      window.addEventListener('resize',throttle(sayHello))














